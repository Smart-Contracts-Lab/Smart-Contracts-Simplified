// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@chainlink/contracts/src/v0.8/ChainlinkClient.sol";
import "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol";

contract WeatherInsurance is ChainlinkClient {
    using Chainlink for Chainlink.Request;

    address public farmer;
    address public insurer;

    uint256 public premium;
    uint256 public payoutAmount;
    uint256 public totalPremiumsPaid;

    uint256 public rainfallThreshold;
    uint256 public rainfallReceived;

    uint256 public policyDuration;
    uint256 public policyStart;

    bool public claimProcessed;

    address private oracle;
    bytes32 private jobId;
    uint256 private fee;

    // Add Chainlink specific variables (_linkToken, _oracle, _jobId, _fee)
    constructor(
        uint256 _threshold,
        uint256 _premium,
        uint256 _duration,
        address _linkToken,
        address _oracle,
        bytes32 _jobId,
        uint256 _fee
    ) payable {
        require(msg.value > 0, "Insurer must fund payout amount");

        insurer = msg.sender;
        rainfallThreshold = _threshold;
        premium = _premium;
        payoutAmount = msg.value;
        policyDuration = _duration;

        setChainlinkToken(_linkToken);
        oracle = _oracle;
        jobId = _jobId;
        fee = _fee;
    }

    modifier onlyFarmer() {
        require(msg.sender == farmer, "Not the farmer");
        _;
    }

    modifier onlyInsurer() {
        require(msg.sender == insurer, "Not the insurer");
        _;
    }

    modifier policyIsActive() {
        require(block.timestamp < policyStart + policyDuration, "Policy expired");
        _;
    }

    modifier policyExpiredOrClaimed() {
        require(block.timestamp >= policyStart + policyDuration || claimProcessed, "Policy still active");
        _;
    }

    // Farmer purchases the policy
    function purchasePolicy() external payable {
        require(farmer == address(0), "Policy already purchased");
        require(msg.value == premium, "Incorrect premium");
        farmer = msg.sender;
        policyStart = block.timestamp;
        totalPremiumsPaid += msg.value;
    }

    // Farmer renews the policy and pays the premium
    function renewPolicy() external payable onlyFarmer {
        require(msg.value == premium, "Incorrect premium amount");
        policyStart = block.timestamp;
        totalPremiumsPaid += msg.value;
        claimProcessed = false;
    }

    // Get data from the Oracle in a specific location, using APIs like "watherapi"
    function requestRainfallData(string memory location) external onlyInsurer policyIsActive {
        require(!claimProcessed, "Claim already processed");

        Chainlink.Request memory request = buildChainlinkRequest(jobId, address(this), this.fulfill.selector);

        // Example: API to OpenWeatherMap or any weather provider
        request.add("get", string(abi.encodePacked("https://api.weatherapi.com/v1/current.json?key=API_KEY&q=", location)));
        request.add("path", "current.precip_mm"); // Adjust path to actual rainfall field
        request.addInt("times", 100);

        sendChainlinkRequestTo(oracle, request, fee);
    }

    // Transfer funds if rainfall level is higher that the set thereshold
    function fulfill(bytes32 _requestId, uint256 _rainfall) public recordChainlinkFulfillment(_requestId) {
        rainfallReceived = _rainfall;
        claimProcessed = true;

        if (_rainfall < rainfallThreshold) {
            payable(farmer).transfer(payoutAmount);
        }
    }

    // Insurer can withdraw remaining funds (cumulated premiums) when the policy is expired
    function withdraw() external onlyInsurer policyExpiredOrClaimed {
        payable(insurer).transfer(address(this).balance);
    }

    // For farmer: Check contract balance to verify payout funds exist
    function getContractBalance() external view returns (uint256) {
        return address(this).balance;
    }

    // For insurer: See total premiums collected
    function getTotalPremiumsPaid() external view returns (uint256) {
        return totalPremiumsPaid;
    }

    // For both: Check when the policy will expire
    function getPolicyExpiry() external view returns (uint256) {
        return policyStart + policyDuration;
    }

    // For both: Check if the policy is active
    function isPolicyActive() external view returns (bool) {
        return (block.timestamp < policyStart + policyDuration) && !claimProcessed;
    }
}
