<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <link rel="stylesheet" href="/style.css">
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">
        <link href="https://fonts.cdnfonts.com/css/futuristic" rel="stylesheet">
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&display=swap" rel="stylesheet">
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const container = document.querySelector('.container');
                const scrollPos = localStorage.getItem('scrollPos');
                if (scrollPos) {
                    container.scrollTop = parseInt(scrollPos);
                    localStorage.removeItem('scrollPos');
                }
                document.querySelectorAll('form').forEach(form => {
                    form.addEventListener('submit', function() {
                        localStorage.setItem('scrollPos', container.scrollTop);
                    });
                });
                updateButtonStates(<%= currentStep %>);
            });

            function updateButtonStates(step) {
                const forms = {
                    1: document.getElementById('deploy-contract-form'),
                    2: document.getElementById('lottery-info-form'),
                    3: document.getElementById('user-enter-form'),
                    4: document.getElementById('check-balance-form'),
                    5: document.getElementById('participant-enter-form'),
                    6: document.getElementById('check-balance-after-form'), 
                    7: document.getElementById('draw-winner-form')
                };
                Object.values(forms).forEach(f => {
                    if (f) {
                        const btn = f.querySelector('button');
                        btn.disabled = true;
                        btn.classList.add('button-disabled');
                    }
                });
                const currentForm = forms[step];
                if (currentForm) {
                    const btn = currentForm.querySelector('button');
                    btn.disabled = false;
                    btn.classList.remove('button-disabled');
                }
            }
        </script>
         <% if (alert != null) { %>
            <script>
                alert("<%= alertMessage %>");
            </script>
        <% } %>
        <script src="https://unpkg.com/@dotlottie/player-component@2.7.12/dist/dotlottie-player.mjs" type="module"></script>
    </head>
    <body>
        <div class="header">
            <h1>Fair Lottery</h1>
        </div>
        <div class="container">
            <div class="bullet-point">
                <div class="header-bullet">
                    <h2>1. Deployment: Organizer Deploys Contract</h2>
                </div>
                <span id="instructions-1">
                    The organizer sets up the lottery by deploying the contract with the maximum number of participants,
                    the contribution of each participant (or price of the lottery) and the fee that he will retain from the pot.
                    Since we are using a Chainlink contract interface, the initialization variables for the VRF contract will be necessary,
                    but we are going to hide them for simplicity (you will find them in the full contract). The lottery will now be labelled
                    as OPEN.
                </span>
                <div id="code-snippet">
                    <pre style="overflow-x:scroll;"><code>
    constructor(
        uint256 _maxParticipants,
        uint256 _contributionAmount,
        uint256 _organizerFee,
        uint64 _subscriptionId,
        address _vrfCoordinator,
        bytes32 _keyHash
    ) VRFConsumerBaseV2(_vrfCoordinator) { ... }
                    </code></pre>
                </div>
                <span id="instructions-1">
                    Enter a number of participants between 5 and 10, a desired contribution between 1 and 100 ETH and a fee between 1 and 5 ETH.
                    Then click on "Deploy Contract" to deploy the Lottery!
                </span>
                <div class="content-bullet">
                    <% if (!deployed) { %>
                        <form class="section-form" id="deploy-contract-form" action="/deploy-contract" method="post">
                            <input id="deploy-contract-input" type="number" name="maxParticipants" min="5" max="10" placeholder="Max participants" required>
                            <input id="deploy-contract-input" type="text" name="contributionAmount" placeholder="Contribution (ETH)" required>
                            <input id="deploy-contract-input" type="text" name="organizerFee" placeholder="Organizer fee (ETH)" required>
                            <button id="deploy-contract-button" onclick="showDeployAnimation()"><i class="fa-solid fa-file-contract" style="padding-right:5%;"></i> Deploy Contrat</button>
                        </form>
                    <% } else { %>
                        <button id="deployed-contract-button" disabled class="button-disabled"><i class="fa-solid fa-check" style="padding-right:5%;"></i> Deployed</button>
                    <% } %>
                    <div id="deploy-animation" class="animation-container hidden">
                        <div class="dice-scene">
                            <div class="cube">
                                <div class="face face1">
                                    <div class="pip center"></div>
                                </div>
                                <div class="face face2">
                                    <div class="pip top-left"></div>
                                    <div class="pip bottom-right"></div>
                                </div>
                                <div class="face face3">
                                    <div class="pip top-left"></div>
                                    <div class="pip center"></div>
                                    <div class="pip bottom-right"></div>
                                </div>
                                <div class="face face4">
                                    <div class="pip top-left"></div>
                                    <div class="pip top-right"></div>
                                    <div class="pip bottom-left"></div>
                                    <div class="pip bottom-right"></div>
                                </div>
                                <div class="face face5">
                                    <div class="pip top-left"></div>
                                    <div class="pip top-right"></div>
                                    <div class="pip center"></div>
                                    <div class="pip bottom-left"></div>
                                    <div class="pip bottom-right"></div>
                                </div>
                                <div class="face face6">
                                    <div class="pip top-left"></div>
                                    <div class="pip top-right"></div>
                                    <div class="pip middle-left"></div>
                                    <div class="pip middle-right"></div>
                                    <div class="pip bottom-left"></div>
                                    <div class="pip bottom-right"></div>
                                </div>
                            </div>
                        </div>
                        <p style="margin-top:40px;">Deploying smart contract…</p>
                    </div>                      
                </div>
            </div>

            <div class="bullet-point">
                <div class="header-bullet">
                    <h2>2. Transparency: Check Contract Informations</h2>
                </div>
                <span id="instructions-1">
                    Everybody on the blockchain can check the contract info and verify its state. The user, for example,
                    can get informations about the Lottery and decide to participate or not.
                </span>
                <div id="code-snippet">
                    <pre style="overflow-x:scroll;"><code>
    function getLotteryInfo() external view returns (
        uint256 participantsCount,
        uint256 maxSlots,
        uint256 requiredContribution,
        address[] memory participantList
    ) {
        return (
            participants.length,
            maxParticipants,
            contributionAmount,
            participants
        );
    }
                    </code></pre>
                </div>
                <span id="instructions-1">
                    Go ahead and click on "Get Lottery Info" to see the information about this lottery!
                </span>
                <div class="content-bullet">
                    <% if (lotteryInfo === null) { %>
                        <form class="section-form" id="lottery-info-form" action="/lottery-info" method="post">
                            <button id="lottery-info-button"><i class="fa-solid fa-magnifying-glass" style="padding-right:5%;"></i> Get Lottery Info </button>
                        </form>
                    <% } else { %>
                        <div id="contract-balance">
                            <h4>Lottery Info:</h4>
                            <ul id="lottery-info-list">
                                <li>Participants: <%= lotteryInfo.participantsCount %></li>
                                <li>Free Places: <%= lotteryInfo.maxSlots - lotteryInfo.participantsCount %></li>
                                <li>Price: <%= lotteryInfo.requiredContribution %></li>
                                <li>Fee: <%= lotteryInfo.lotteryFee %></li>
                            </ul>
                        </div>
                    <% } %>
                </div>
            </div>

            <div class="bullet-point">
                <div class="header-bullet">
                    <h2>3. Entry: User Joins Lottery</h2>
                </div>
                <span id="instructions-1">
                    When a user finds a lottery that best suits him, he can easily join the lottery by paying the
                    price. The function enterLottery() first checks if the lottery is open, if it sill has available places
                    and if the contribution amount was right, then it registers the user as a participant and emits an event 
                    with the user's address that can be read after the transaction is successful.
                </span>
                <div id="code-snippet">
                    <pre style="overflow-x:scroll;"><code>
    function enterLottery() external payable {
        require(state == LotteryState.OPEN, "Lottery not open");
        require(msg.value == contributionAmount, "Wrong amount");
        require(participants.length < maxParticipants, "Lottery full");

        participants.push(msg.sender);
        emit Entered(msg.sender);
    }
                    </code></pre>
                </div>
                <span id="instructions-1">
                    Now it's your turn! Let's enter this lottery and with some luck you could win the prize pot!
                </span>
                <div class="content-bullet">
                    <% if (!organizerEntered) { %>
                        <form class="section-form" id="user-enter-form" action="/user-enter" method="post">
                            <button id="user-enter-button" onclick="showEnterAnimation()"><i class="fa-solid fa-user-plus" style="padding-right:5%;"></i> Enter Lottery </button>
                        </form>
                    <% } else { %>
                        <button id="deployed-contract-button" disabled class="button-disabled"><i class="fa-solid fa-check" style="padding-right:5%;"></i> Entered</button>
                    <% } %>
                    <div id="animation-enter-container" style="display:none;">
                        <i id="user" class="fa-solid fa-user icon"></i>
                        <i id="contract" class="fa-solid fa-file-contract icon"></i>
                        <div class="text-entered">Lottery entered!</div>
                    </div>
                </div>
            </div>

            <div class="bullet-point">
                <div class="header-bullet">
                    <h2>4. Transparency: Check Contract Balance</h2>
                </div>
                <span id="instructions-1">
                    Everybody on the blockchain can check the contract balance to make sure that all the funds are available and deposited.
                </span>
                <div id="code-snippet">
                    <pre style="overflow-x:scroll;"><code>
    function getBalance() external view returns (uint256) {
        return address(this).balance;
    }
                    </code></pre>
                </div>
                <span id="instructions-1">
                    Go ahead and click on "Get Contract Balance" to check the balance!
                </span>
                <div class="content-bullet">
                    <% if (initialBalance === null) { %>
                        <form class="section-form" id="check-balance-form" action="/check-balance" method="post">
                            <button id="check-balance-button"><i class="fa-solid fa-magnifying-glass" style="padding-right:5%;"></i> Get Contract Balance </button>
                        </form>
                    <% } else { %>
                        <div id="contract-balance">
                            <h5>Contract Balance: <%= initialBalance %> <i class="fa-brands fa-ethereum"></i></h5>
                        </div>
                    <% } %>
                </div>
            </div>

            <div class="bullet-point">
                <div class="header-bullet">
                    <h2>5. Entry: Participants Join Lottery</h2>
                </div>
                <span id="instructions-1">
                    Other participants will be entering the lottery. For our demo we are going to manually fill up the available places 
                    by looping over an array of fictious addresses, creating a wallet for them and calling enterLottery().
                </span>
                <div id="code-snippet">
                    <pre style="overflow-x:scroll;"><code>
    function enterLottery() external payable {
        require(state == LotteryState.OPEN, "Lottery not open");
        require(msg.value == contributionAmount, "Wrong amount");
        require(participants.length < maxParticipants, "Lottery full");

        participants.push(msg.sender);
        emit Entered(msg.sender);
    }
                    </code></pre>
                </div>
                <div class="content-bullet">
                    <% if (!participantEntered) { %>
                        <form class="section-form" id="participant-enter-form" action="/participant-enter" method="post">
                            <button id="participant-enter-button" onclick="showParticipantsAnimation()"><i class="fa-solid fa-user-plus" style="padding-right:5%;"></i> Participant Enter</button>
                        </form>
                    <% } else { %>
                        <button id="deployed-contract-button" disabled class="button-disabled"><i class="fa-solid fa-check" style="padding-right:5%;"></i> Entered</button>
                    <% } %>
                    <div id="animation-participants-container" style="display:none;">
                        <i class="fa-solid fa-user icon user-2"></i>
                        <i class="fa-solid fa-user icon user-2"></i>
                        <i class="fa-solid fa-user icon user-2"></i>
                        <i class="fa-solid fa-user icon user-2"></i>
                        <i class="fa-solid fa-user icon user-2"></i>
                        <i id="contract-2" class="fa-solid fa-file-contract"></i>
                        <div id="text-entered-participants">Entering lottery...</div>
                    </div>
                </div>
            </div>

            <div class="bullet-point">
                <div class="header-bullet">
                    <h2>6. Transparency: Check Contract Balance and Info</h2>
                </div>
                <span id="instructions-1">
                    After the available spots have been filled up, we can once again check the contract balance and the lottery information to verify 
                    that everything is at its place. We should now see a contract balance of (nr. Participants x contribution) and have 0 free places.
                </span>
                <div id="code-snippet">
                    <pre style="overflow-x:scroll;"><code>
    function getBalance() external view returns (uint256) {
        return address(this).balance;
    }

    function getLotteryInfo() external view returns (
        uint256 participantsCount,
        uint256 maxSlots,
        uint256 requiredContribution,
        address[] memory participantList
    ) {
        return (
            participants.length,
            maxParticipants,
            contributionAmount,
            participants
        );
    }
                    </code></pre>
                </div>
                <span id="instructions-1">
                    Go ahead and click on "Get Contract Balance" to check the balance!
                </span>
                <div class="content-bullet">
                    <% if (afterBalance === null) { %>
                        <form class="section-form" id="check-balance-after-form" action="/check-balance-after" method="post">
                            <button id="lottery-info-button"><i class="fa-solid fa-magnifying-glass" style="padding-right:5%;"></i> Get Contract Balance </button>
                        </form>
                    <% } else { %>
                        <div id="contract-balance">
                            <h5>Contract Balance: <%= afterBalance %> <i class="fa-brands fa-ethereum"></i></h5>
                        </div>
                        <span id="instructions-1">
                            Now we can check the lottery information: there shouldn't be any free places!
                        </span>
                        <% if (afterInfo === null) { %>
                            <form class="section-form" id="lottery-info-form" action="/lottery-info-after" method="post">
                                <button id="lottery-info-button"><i class="fa-solid fa-magnifying-glass" style="padding-right:5%;"></i> Get Lottery Info </button>
                            </form>
                        <% } else { %>
                            <div id="contract-balance">
                                <h4>Lottery Info:</h4>
                                <ul id="lottery-info-list">
                                    <li>Participants: <%= afterInfo.participantsCount %></li>
                                    <li>Free Places: <%= afterInfo.maxSlots - afterInfo.participantsCount %></li>
                                    <li>Price: <%= afterInfo.requiredContribution %></li>
                                    <li>Fee: <%= afterInfo.lotteryFee %></li>
                                </ul>
                            </div>
                        <% } %>
                    <% } %>
                </div>
            </div>

            <div class="bullet-point">
                <div class="header-bullet">
                    <h2>7. Draw: Organizer Requests Randomness</h2>
                </div>
                <span id="instructions-1">
                    Once full, the organizer can call drawWinner() to request a random pick. The function first checks three things:
                    that the caller is the organizer, that the lottery has reached its maximum number of participants, and that the
                    lottery is still open. Once those conditions pass, it moves the contract into a “drawing” state and sends a request
                    to the Chainlink VRF Coordinator for a batch of truly random numbers — using the VRF initialization variables — and
                    stores the returned requestId, emitting a WinnerRequested event so off-chain services know a draw is in progress.
                    Later, when Chainlink fulfills that request, it calls the overridden fulfillRandomWords() callback with the random
                    words array. We take the first word, mod it by the number of participants to pick a random index, and select that participant
                    as the winner. The prize is then computed (all ETH in the contract minus the organizer’s fee), the contract's state is set to CLOSED,
                    the prize and the fee are transferred to the winner and the organizer accordingly, and the event WinnerPicked is emitted with the winner’s
                    address and prize amount.
                </span>
                <div id="code-snippet">
                    <pre style="overflow-x:scroll;"><code>
    function drawWinner() external {
        require(msg.sender == organizer, "Only organizer");
        require(participants.length == maxParticipants, "Not enough participants");
        require(state == LotteryState.OPEN, "Already drawing or closed");

        state = LotteryState.DRAWING;
        requestId = COORDINATOR.requestRandomWords(
            keyHash,
            subscriptionId,
            requestConfirmations,
            callbackGasLimit,
            numWords
        );
        emit WinnerRequested(requestId);
    }

    function fulfillRandomWords(uint256, uint256[] memory randomWords) internal override {
        uint256 idx = randomWords[0] % participants.length;
        address selected = participants[idx];

        uint256 totalBalance = address(this).balance;
        uint256 prize = totalBalance - organizerFee;

        winner = selected;
        state = LotteryState.CLOSED;

        payable(winner).transfer(prize);
        payable(organizer).transfer(organizerFee);

        emit WinnerPicked(winner, prize);
    }
                    </code></pre>
                </div>
                <span id="instructions-1">
                    Go ahead and click on "Draw Winner" to find out if you won:
                </span>
                <div class="content-bullet">
                    <% if (!drawRequested) { %>
                        <form class="section-form" id="draw-winner-form" action="/draw-winner" method="post">
                            <button id="draw-winner-button" onclick="showDrawingAnimation()"><i class="fa-solid fa-drum" style="padding-right:5%;"></i> Draw Winner</button>
                        </form>
                    <% } else { %>
                        <% if (winner) { %>
                            <% if (winner == participant) { %>
                                <div id="contract-balance">
                                    <div id="winner-section-you">
                                        <p><b>YOU WON!!!</b></p>
                                        <p>Winner: <%= winner %></p>
                                        <p>Prize: <%= prize %> ETH</p>
                                    </div>
                                </div>
                            <% } else { %>
                                <div id="contract-balance">
                                    <div id="winner-section">
                                        <p>Unfortunately you did not win...</p>
                                        <p>Winner: <%= winner %></p>
                                        <p>Prize: <%= prize %> ETH</p>
                                    </div>
                                </div>
                            <% } %>
                        <% } %>
                    <% } %>
                    <div id="draw-winner-animation" style="display:none;">
                        <div id="text-drawing-winner">Drawing Winner...</div>
                        <dotlottie-player src="https://lottie.host/a17ddf15-02a6-464b-89fa-3ced339cb789/ZiyW4sinS4.lottie" background="transparent" speed="1" style="width: 300px; height: 300px" loop autoplay></dotlottie-player>
                    </div>
                </div>
            </div>

            <div class="bullet-point">
                <div class="header-bullet">
                    <h2>
                        Full Smart Contract
                    </h2>
                </div>
                <span id="instructions-1">
                    The FairLottery contract lets an organizer run a small, trust-minimized lottery using Chainlink’s verifiable
                    randomness. When deployed, the organizer specifies how many players can enter (maxParticipants), how much each
                    must pay (contributionAmount), and the fee they’ll collect (organizerFee), then funds a Chainlink VRF subscription.
                    Players join by calling enterLottery() and sending exactly the contribution amount; their addresses are stored
                    until the participant list is full. Once full, the organizer calls drawWinner(), which flips the contract into a
                    “DRAWING” state and sends a randomness request to the VRF mock coordinator. When the random number arrives in
                    fulfillRandomWords(), the contract picks a winner by taking the random word modulo the number of entrants,
                    computes the prize pot (all received contributions minus the organizer’s fee), and then automatically transfers the
                    prize to the winner and the fee back to the organizer. Throughout, the contract emits events — Entered, WinnerRequested,
                    and WinnerPicked — and provides view functions to check its ETH balance and current lottery details.<br>
                    <b>For demo purposes, a mock contract was used, instead of a real one, so that the subscription didn't have to be funded. In a real-world scenario
                        the chainlink subscription has to be funded with LINK.
                    </b>
                </span>
                <div id="code-snippet">
                    <pre style="overflow-x:scroll;"><code>
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol";
import "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol";

contract FairLottery is VRFConsumerBaseV2 {
    address public organizer;
    uint256 public maxParticipants;
    uint256 public contributionAmount;
    uint256 public organizerFee;
    address[] public participants;

    enum LotteryState { OPEN, DRAWING, CLOSED }
    LotteryState public state;

    // Chainlink VRF mock coordinator
    VRFCoordinatorV2Mock public COORDINATOR;
    uint64 public subscriptionId;
    bytes32 public keyHash;
    uint32 public callbackGasLimit = 100_000;
    uint16 public requestConfirmations = 3;
    uint32 public numWords = 1;

    uint256 public requestId;
    address public winner;

    event Entered(address indexed participant);
    event WinnerRequested(uint256 indexed requestId);
    event WinnerPicked(address indexed winner, uint256 prize);

    constructor(
        uint256 _maxParticipants,
        uint256 _contributionAmount,
        uint256 _organizerFee,
        uint64 _subscriptionId,
        VRFCoordinatorV2Mock _vrfCoordinator,
        bytes32 _keyHash
    ) VRFConsumerBaseV2(address(_vrfCoordinator)) {
        require(_organizerFee < _maxParticipants * _contributionAmount, "Fee too high");

        organizer = msg.sender;
        maxParticipants = _maxParticipants;
        contributionAmount = _contributionAmount;
        organizerFee = _organizerFee;
        subscriptionId = _subscriptionId;
        keyHash = _keyHash;
        COORDINATOR = _vrfCoordinator;
        state = LotteryState.OPEN;
    }

    function enterLottery() external payable {
        require(state == LotteryState.OPEN, "Lottery not open");
        require(msg.value == contributionAmount, "Wrong amount");
        require(participants.length < maxParticipants, "Lottery full");

        participants.push(msg.sender);
        emit Entered(msg.sender);
    }

    function drawWinner() external {
        require(msg.sender == organizer, "Only organizer");
        require(participants.length == maxParticipants, "Not enough participants");
        require(state == LotteryState.OPEN, "Already drawing or closed");

        state = LotteryState.DRAWING;
        requestId = COORDINATOR.requestRandomWords(
            keyHash,
            subscriptionId,
            requestConfirmations,
            callbackGasLimit,
            numWords
        );
        emit WinnerRequested(requestId);
    }

    function fulfillRandomWords(uint256, uint256[] memory randomWords) internal override {
        uint256 idx = randomWords[0] % participants.length;
        address selected = participants[idx];

        uint256 totalBalance = address(this).balance;
        uint256 prize = totalBalance - organizerFee;

        winner = selected;
        state = LotteryState.CLOSED;

        payable(winner).transfer(prize);
        payable(organizer).transfer(organizerFee);

        emit WinnerPicked(winner, prize);
    }

    function getBalance() external view returns (uint256) {
        return address(this).balance;
    }

    function getLotteryInfo() external view returns (
        uint256 participantsCount,
        uint256 maxSlots,
        uint256 requiredContribution,
        address[] memory participantList
    ) {
        return (
            participants.length,
            maxParticipants,
            contributionAmount,
            participants
        );
    }
}                            
                    </code></pre>
                </div>
            </div>

        </div>
        <canvas id="backgroundCanvas" style="position:fixed; top:0; left:0; width:100%; height:100%; z-index:-2;"></canvas>
        <canvas id="lotteryCanvas" style="position:fixed; top:0; left:0; width:100%; height:100%; z-index:-1;"></canvas>

        <script>
            const bgCanvas = document.getElementById('backgroundCanvas');
            const bgCtx = bgCanvas.getContext('2d');

            const canvas = document.getElementById('lotteryCanvas');
            const ctx = canvas.getContext('2d');

            let width = canvas.width = bgCanvas.width = window.innerWidth;
            let height = canvas.height = bgCanvas.height = window.innerHeight;

            const numParticles = 400;
            const particles = [];

            class Particle {
                constructor() {
                    this.reset();
                }
                reset() {
                    this.x = Math.random() * width;
                    this.y = Math.random() * height;
                    this.size = Math.random() * 2 + 0.5;
                    this.vx = (Math.random() - 0.5) * 0.05;
                    this.vy = (Math.random() - 0.5) * 0.05;
                    this.opacity = Math.random() * 0.5 + 0.3;
                }
                update() {
                    this.x += this.vx;
                    this.y += this.vy;
                    if (this.x < 0) this.x = width;
                    if (this.x > width) this.x = 0;
                    if (this.y < 0) this.y = height;
                    if (this.y > height) this.y = 0;
                }
                draw() {
                    bgCtx.beginPath();
                    bgCtx.fillStyle = `rgba(255, 215, 0, ${this.opacity})`;
                    bgCtx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                    bgCtx.fill();
                }
            }

            for (let i = 0; i < numParticles; i++) {
                particles.push(new Particle());
            }

            let sparkle = null;
            let nextSparkleTime = Date.now() + Math.random() * 10000 + 10000;

            function createSparkle() {
                sparkle = {
                    x: -100,
                    y: Math.random() * height,
                    size: 80 + Math.random() * 60,
                    baseSize: 80 + Math.random() * 60,
                    speedX: 0.2 + Math.random() * 0.3,
                    speedY: -0.05 + Math.random() * 0.1,
                    opacity: 1,
                    rotation: Math.random() * Math.PI * 2,
                    rotationSpeed: (Math.random() - 0.5) * 0.0015
                };
            }

            function updateSparkle(deltaTime) {
                if (sparkle) {
                    sparkle.x += sparkle.speedX * deltaTime;
                    sparkle.y += sparkle.speedY * deltaTime;
                    sparkle.opacity -= 0.0005 * deltaTime;
                    sparkle.rotation += sparkle.rotationSpeed * deltaTime;

                    sparkle.size = sparkle.baseSize + Math.sin(sparkle.rotation * 2) * 10;

                    if (sparkle.opacity <= 0) {
                        sparkle = null;
                        nextSparkleTime = Date.now() + Math.random() * 10000 + 10000;
                    }
                } else if (Date.now() > nextSparkleTime) {
                    createSparkle();
                }
            }

            function drawSparkle() {
                if (sparkle) {
                    bgCtx.save();
                    bgCtx.translate(sparkle.x, sparkle.y);
                    bgCtx.rotate(sparkle.rotation);

                    const gradient = bgCtx.createRadialGradient(
                        0, 0, sparkle.size * 0.2,
                        0, 0, sparkle.size
                    );
                    gradient.addColorStop(0, `rgba(255, 223, 70, ${sparkle.opacity})`);
                    gradient.addColorStop(1, `rgba(255, 223, 70, 0)`);

                    bgCtx.fillStyle = gradient;
                    bgCtx.beginPath();
                    bgCtx.arc(0, 0, sparkle.size, 0, Math.PI * 2);
                    bgCtx.fill();

                    bgCtx.restore();
                }
            }

            let lastBgTime = 0;
            function animateBackground(time = 0) {
                const deltaTime = time - lastBgTime;
                lastBgTime = time;

                bgCtx.clearRect(0, 0, width, height);

                particles.forEach(p => {
                    p.update();
                    p.draw();
                });

                updateSparkle(deltaTime);
                drawSparkle();

                requestAnimationFrame(animateBackground);
            }

            const numBalls = 25;
            const balls = [];

            class Ball {
                constructor() {
                    this.reset();
                }
                reset() {
                    this.x = Math.random() * width;
                    this.y = Math.random() * height;
                    this.vx = (Math.random() - 0.5) * 0.2;
                    this.vy = (Math.random() - 0.5) * 0.2;
                    this.radius = 25 + Math.random() * 10;
                    this.number = Math.floor(Math.random() * 49) + 1;
                    this.colorHue = Math.random() * 360;
                    this.rotation = Math.random() * Math.PI * 2;
                    this.rotationSpeed = (Math.random() - 0.5) * 0.002;
                    this.shimmer = Math.random() < 0.2;
                    this.shimmerTimer = Math.random() * 5000 + 2000;
                }
                update(deltaTime) {
                    this.x += this.vx;
                    this.y += this.vy;
                    this.rotation += this.rotationSpeed * deltaTime;

                    if (this.x < -this.radius) this.x = width + this.radius;
                    if (this.x > width + this.radius) this.x = -this.radius;
                    if (this.y < -this.radius) this.y = height + this.radius;
                    if (this.y > height + this.radius) this.y = -this.radius;

                    if (this.shimmer) {
                        this.shimmerTimer -= deltaTime;
                        if (this.shimmerTimer <= 0) {
                            this.shimmerTimer = Math.random() * 5000 + 2000;
                        }
                    }
                }
                draw(ctx) {
                    ctx.save();
                    ctx.translate(this.x, this.y);
                    ctx.rotate(this.rotation);

                    const gradient = ctx.createRadialGradient(
                        -this.radius * 0.3, -this.radius * 0.3,
                        this.radius * 0.1,
                        0, 0,
                        this.radius
                    );
                    gradient.addColorStop(0, `hsl(${this.colorHue}, 70%, 90%)`);
                    gradient.addColorStop(1, `hsl(${this.colorHue}, 70%, 50%)`);

                    ctx.beginPath();
                    ctx.fillStyle = gradient;
                    ctx.arc(0, 0, this.radius, 0, Math.PI * 2);
                    ctx.fill();

                    ctx.strokeStyle = "white";
                    ctx.lineWidth = 2;
                    ctx.stroke();

                    if (this.shimmer && this.shimmerTimer < 500) {
                        const shimmerOpacity = this.shimmerTimer / 500;
                        ctx.beginPath();
                        ctx.fillStyle = `rgba(255,255,255,${shimmerOpacity})`;
                        ctx.arc(-this.radius * 0.4, -this.radius * 0.4, this.radius * 0.2, 0, Math.PI * 2);
                        ctx.fill();
                    }

                    ctx.fillStyle = "white";
                    ctx.font = `${this.radius * 0.8}px Arial`;
                    ctx.textAlign = "center";
                    ctx.textBaseline = "middle";
                    ctx.shadowColor = "rgba(0,0,0,0.4)";
                    ctx.shadowBlur = 4;
                    ctx.fillText(this.number, 0, 0);
                    ctx.shadowBlur = 0;

                    ctx.restore();
                }
            }

            for (let i = 0; i < numBalls; i++) {
                balls.push(new Ball());
            }

            let lastTime = 0;
            function animateBalls(time = 0) {
                const deltaTime = time - lastTime;
                lastTime = time;

                ctx.clearRect(0, 0, width, height);

                balls.forEach(ball => {
                    ball.update(deltaTime);
                    ball.draw(ctx);
                });

                requestAnimationFrame(animateBalls);
            }

            window.addEventListener('resize', () => {
                width = canvas.width = bgCanvas.width = window.innerWidth;
                height = canvas.height = bgCanvas.height = window.innerHeight;
            });

            animateBackground();
            animateBalls();
        </script>
        <script src="script.js"></script>
    </body>
</html>
